
# Recreating the connecting-circle Website from Scratch

This document contains step-by-step instructions to recreate the connecting-circle website, a multilingual platform for authentic relating and communication services.

## Project Setup

1. Create a new React project with Vite:
   ```bash
   npm create vite@latest connecting-circle -- --template react-ts
   cd connecting-circle
   ```

2. Install required dependencies:
   ```bash
   npm install react-router-dom framer-motion lucide-react @tanstack/react-query
   npm install tailwindcss postcss autoprefixer -D
   npm install @radix-ui/react-dropdown-menu class-variance-authority clsx tailwind-merge
   ```

3. Initialize Tailwind CSS:
   ```bash
   npx tailwindcss init -p
   ```

## Project Structure

Create the following directory structure:
```
src/
├── components/
│   ├── ui/
│   ├── Navbar.tsx
│   ├── Footer.tsx
│   ├── Hero.tsx
│   ├── ServicesGrid.tsx
│   ├── Testimonials.tsx
│   └── LanguageSelector.tsx
├── contexts/
│   └── LanguageContext.tsx
├── pages/
│   ├── Index.tsx
│   ├── About.tsx
│   ├── Coaching.tsx
│   ├── Programs.tsx
│   ├── Book.tsx
│   └── NotFound.tsx
├── lib/
│   └── utils.ts
└── App.tsx
```

## Design System Configuration

### 1. Tailwind Configuration

Create a `tailwind.config.ts` file with this configuration:

```typescript
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px'
      }
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        circle: {
          light: '#EFD9D9', // Lighter dusty pink
          DEFAULT: '#C8898A', // Darker dusty pink
          dark: '#AC6D6E', // Even darker dusty pink
          text: '#000000' // Black text
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' }
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' }
        },
        'fade-in': {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'fade-in': 'fade-in 1s ease-out'
      }
    }
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
```

### 2. CSS Variables Setup

Create `src/index.css` with the following content:

```css
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Cormorant+Garamond:wght@300;400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 20% 98%;
    --foreground: 0 0% 0%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 0%;

    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 0%;

    --primary: 351 30% 60%;
    --primary-foreground: 0 0% 98%;

    --secondary: 351 15% 85%;
    --secondary-foreground: 0 0% 0%;

    --muted: 351 10% 85%;
    --muted-foreground: 0 0% 0%;

    --accent: 351 15% 88%;
    --accent-foreground: 0 0% 0%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 351 10% 75%;
    --input: 351 10% 75%;
    --ring: 351 30% 60%;

    --radius: 0.5rem;
  }

  html, body {
    @apply overflow-x-hidden min-h-screen;
  }

  body {
    @apply bg-background text-foreground;
    font-family: 'Montserrat', sans-serif;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Cormorant Garamond', serif;
  }
}

@layer components {
  .service-card {
    @apply bg-white p-4 md:p-6 rounded-lg shadow-md transition-all duration-300 hover:shadow-lg border border-circle/10;
  }

  .btn-primary {
    @apply bg-circle text-white px-4 md:px-6 py-2 rounded-full hover:bg-circle-dark transition-colors duration-300;
  }

  .btn-outline {
    @apply border border-circle text-black px-4 md:px-6 py-2 rounded-full hover:bg-circle/10 transition-colors duration-300;
  }
  
  .container-custom {
    @apply container mx-auto px-4 max-w-6xl;
  }
}

@layer utilities {
  .animate-fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}
```

## Core Components

### 1. Language Context

Create `src/contexts/LanguageContext.tsx`:

```typescript
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Language = 'en' | 'de';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const translations = {
  en: {
    // Navigation
    "nav.home": "Home",
    "nav.about": "About",
    "nav.coaching": "Coaching",
    "nav.programs": "Programs",
    "nav.book": "Book Your Appointment",
    
    // Hero section
    "hero.title": "Connecting Minds, Building Futures",
    "hero.subtitle": "Personalized coaching and mentorship to help you achieve your goals and transform your life",
    "hero.cta": "Start Your Journey",
    "hero.main.title": "Honest communication & authentic encounters",
    "hero.main.description": "connecting-circle – where words touch, people connect, and growth happens",
    "hero.main.longdesc": "Looking for deep connections, honest conversations, and shared growth? connecting-circle invites you to experience new perspectives in a loving, queer-sensitive space – online & in person, in German & English, in open & closed groups. Together we can develop, learn, feel, play, grow, and be truly in connection.",
    
    // Services section
    "services.title": "Our Services",
    "services.subtitle": "Discover how we can help you grow",
    "services.offerings": "Our Offerings",
    "services.readmore": "Read more",
    
    // Service cards
    "service.authentic.love.title": "Authentic Relating - Love and Sex",
    "service.authentic.love.desc": "A weekly live, in-person group in Berlin exploring authentic connections in love and intimate relationships.",
    
    "service.authentic.english.title": "Authentic Relating in Community - English",
    "service.authentic.english.desc": "A 6-week zoom course of 2 hours weekly. These run every quarter, connecting English speakers worldwide.",
    
    "service.authentic.german.title": "Authentic Relating in Community - German",
    "service.authentic.german.desc": "The same powerful ARC experience, but delivered entirely in German. Join our 6-week journey of connection.",
    
    "service.goldies.title": "connecting-circle GOLDies",
    "service.goldies.desc": "An online German closed group meeting weekly via zoom with twice-yearly live weekends, running January-June and September-December.",
    
    "service.private.title": "Private Sessions",
    "service.private.desc": "Individual or couples counseling providing a safe space to honestly explore relationships with yourself, loved ones, or the world.",
    
    "service.workshops.title": "Other Groups and Workshops",
    "service.workshops.desc": "Sophie leads regular groups and workshops in Berlin, including Cacao ceremonies and Findhorn Circle Dances & Sacred Dance.",
    
    // Testimonials section
    "testimonials.title": "What Our Clients Say",
    "testimonials.coming.soon": "Coming Soon",
    "testimonials.placeholder": "Future testimonials will appear here.",
    
    // Footer
    "footer.rights": "All rights reserved",
    "footer.contact": "Contact Us",
    "footer.slogan": "Creating spaces for authentic connection, honest communication, and personal growth.",
    "footer.made.with.love": "Made with love in Berlin",
    "footer.navigation": "Navigation",
    "footer.copyright": "All rights reserved."
  },
  de: {
    // Navigation
    "nav.home": "Startseite",
    "nav.about": "Über uns",
    "nav.coaching": "Coaching",
    "nav.programs": "Programme",
    "nav.book": "Termin buchen",
    
    // Hero section
    "hero.title": "Verbindung von Köpfen, Aufbau von Zukunft",
    "hero.subtitle": "Personalisiertes Coaching und Mentoring, um Ihnen zu helfen, Ihre Ziele zu erreichen und Ihr Leben zu verändern",
    "hero.cta": "Starten Sie Ihre Reise",
    "hero.main.title": "Ehrliche Kommunikation & authentische Begegnungen",
    "hero.main.description": "connecting-circle – wo Worte berühren, Begegnung verbindet und Wachstum erblühen kann",
    "hero.main.longdesc": "Suchst du nach tiefen Verbindungen, ehrlichen Gesprächen und gemeinsamem Wachstum? connecting-circle lädt dich ein, neue Perspektiven in einem liebevollen, queer-sensiblen Raum zu erleben – online & persönlich, auf Deutsch & Englisch, in offenen & geschlossenen Gruppen. Zusammen können wir uns entwickeln, lernen, fühlen, spielen, wachsen und wirklich in Verbindung sein.",
    
    // Services section
    "services.title": "Unsere Leistungen",
    "services.subtitle": "Entdecken Sie, wie wir Ihnen beim Wachsen helfen können",
    "services.offerings": "Unsere Angebote",
    "services.readmore": "Mehr erfahren",
    
    // Service cards
    "service.authentic.love.title": "Authentic Relating - Liebe und Sexualität",
    "service.authentic.love.desc": "Eine wöchentliche Live-Gruppe in Berlin, die authentische Verbindungen in der Liebe und in intimen Beziehungen erforscht.",
    
    "service.authentic.english.title": "Authentic Relating in der Gemeinschaft - Englisch",
    "service.authentic.english.desc": "Ein 6-wöchiger Zoom-Kurs von 2 Stunden wöchentlich. Diese finden vierteljährlich statt und verbinden englischsprachige Menschen weltweit.",
    
    "service.authentic.german.title": "Authentic Relating in der Gemeinschaft - Deutsch",
    "service.authentic.german.desc": "Die gleiche kraftvolle ARC-Erfahrung, aber vollständig auf Deutsch. Nimm teil an unserer 6-wöchigen Verbindungsreise.",
    
    "service.goldies.title": "connecting-circle GOLDies",
    "service.goldies.desc": "Eine geschlossene deutschsprachige Online-Gruppe, die sich wöchentlich über Zoom trifft, mit halbjährlichen Live-Wochenenden von Januar bis Juni und September bis Dezember.",
    
    "service.private.title": "Einzelsitzungen",
    "service.private.desc": "Einzel- oder Paarberatung, die einen sicheren Raum bietet, um ehrlich die Beziehungen zu dir selbst, deinen Liebsten oder der Welt zu erforschen.",
    
    "service.workshops.title": "Andere Gruppen und Workshops",
    "service.workshops.desc": "Sophie leitet regelmäßige Gruppen und Workshops in Berlin, darunter Kakao-Zeremonien und Findhorn-Kreistänze & Sakraltänze.",
    
    // Testimonials section
    "testimonials.title": "Was unsere Kunden sagen",
    "testimonials.coming.soon": "Demnächst verfügbar",
    "testimonials.placeholder": "Zukünftige Erfahrungsberichte werden hier erscheinen.",
    
    // Footer
    "footer.rights": "Alle Rechte vorbehalten",
    "footer.contact": "Kontaktieren Sie uns",
    "footer.slogan": "Wir schaffen Räume für authentische Verbindung, ehrliche Kommunikation und persönliches Wachstum.",
    "footer.made.with.love": "Mit Liebe in Berlin gemacht",
    "footer.navigation": "Navigation",
    "footer.copyright": "Alle Rechte vorbehalten."
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  useEffect(() => {
    // Try to get the user's country using a geolocation API
    const detectUserCountry = async () => {
      try {
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();
        
        // If the user is from Germany, set language to German
        if (data.country_code === 'DE') {
          setLanguage('de');
        }
        
        // Store the detected language in localStorage to avoid repeated API calls
        localStorage.setItem('preferred_language', language);
      } catch (error) {
        console.error('Error detecting user location:', error);
      }
    };
    
    // Check if we have a saved language preference
    const savedLanguage = localStorage.getItem('preferred_language') as Language | null;
    
    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'de')) {
      setLanguage(savedLanguage);
    } else {
      // If no saved preference, detect based on location
      detectUserCountry();
    }
  }, []);
  
  // Save language preference whenever it changes
  useEffect(() => {
    localStorage.setItem('preferred_language', language);
  }, [language]);

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations[typeof language]] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
```

### 2. Language Selector Component

Create `src/components/LanguageSelector.tsx`:

```typescript
import React from 'react';
import { Globe } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const LanguageSelector: React.FC = () => {
  const { language, setLanguage } = useLanguage();

  const handleLanguageChange = (lang: 'en' | 'de') => {
    setLanguage(lang);
    // Save the user's manual selection
    localStorage.setItem('preferred_language', lang);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger className="flex items-center focus:outline-none">
        <Globe size={20} className="text-black" />
        <span className="ml-1 text-black uppercase">{language}</span>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="bg-white">
        <DropdownMenuItem 
          className={`${language === 'en' ? 'bg-accent text-black' : 'text-black'}`}
          onClick={() => handleLanguageChange('en')}
        >
          English
        </DropdownMenuItem>
        <DropdownMenuItem 
          className={`${language === 'de' ? 'bg-accent text-black' : 'text-black'}`}
          onClick={() => handleLanguageChange('de')}
        >
          Deutsch
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default LanguageSelector;
```

### 3. Navbar Component

Create `src/components/Navbar.tsx`:

```typescript
import React, { useState, useEffect } from 'react';
import { Menu, X } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { useLanguage } from '@/contexts/LanguageContext';
import LanguageSelector from '@/components/LanguageSelector';
import { motion } from 'framer-motion';

const Navbar: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const { t } = useLanguage();
  const location = useLocation();

  // Track scrolling to change navbar style
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        setScrolled(true);
      } else {
        setScrolled(false);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Close mobile menu when route changes
  useEffect(() => {
    setIsOpen(false);
  }, [location.pathname]);

  const navLinks = [
    { name: t('nav.home'), path: '/' },
    { name: t('nav.about'), path: '/about' },
    { name: t('nav.coaching'), path: '/coaching' },
    { name: t('nav.programs'), path: '/programs' },
    { name: t('nav.book'), path: '/book' },
  ];

  const isActive = (path: string) => {
    return location.pathname === path;
  };

  return (
    <header 
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        scrolled ? 'bg-white shadow-md py-2' : 'bg-transparent py-4'
      }`}
    >
      <div className="container-custom">
        <nav className="flex items-center justify-between">
          {/* Logo */}
          <Link to="/" className="flex items-center">
            <img 
              src="/lovable-uploads/072921ca-89b7-4971-baaf-47c7144dee22.png" 
              alt="connecting-circle Logo" 
              className="h-12 md:h-16"
            />
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            {navLinks.map((link) => (
              <Link
                key={link.path}
                to={link.path}
                className={`text-black hover:text-circle transition-colors relative ${
                  isActive(link.path) ? 'font-medium' : ''
                }`}
              >
                {link.name}
                {isActive(link.path) && (
                  <motion.div 
                    className="absolute -bottom-1 left-0 right-0 h-0.5 bg-circle"
                    layoutId="navbar-underline"
                  />
                )}
              </Link>
            ))}
            
            <div className="ml-4">
              <LanguageSelector />
            </div>
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center">
            <div className="mr-4">
              <LanguageSelector />
            </div>
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="text-black focus:outline-none"
            >
              {isOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>
        </nav>

        {/* Mobile Navigation */}
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="md:hidden bg-white shadow-lg rounded-lg mt-2 py-4 px-6"
          >
            <div className="flex flex-col space-y-4">
              {navLinks.map((link) => (
                <Link
                  key={link.path}
                  to={link.path}
                  className={`text-black hover:text-circle transition-colors ${
                    isActive(link.path) ? 'font-medium' : ''
                  }`}
                >
                  {link.name}
                </Link>
              ))}
            </div>
          </motion.div>
        )}
      </div>
    </header>
  );
};

export default Navbar;
```

### 4. Hero Component

Create `src/components/Hero.tsx`:

```typescript
import React from 'react';
import { motion } from 'framer-motion';
import { useLanguage } from '@/contexts/LanguageContext';

const Hero: React.FC = () => {
  const { t } = useLanguage();
  
  return (
    <section className="py-16 md:py-24 bg-gradient-to-b from-circle-light/70 to-white overflow-hidden">
      <div className="container-custom">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
          <motion.div 
            className="text-center md:text-left order-2 md:order-1"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7 }}
          >
            <motion.h1 
              className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-semibold text-black mb-4 md:mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
            >
              {t('hero.main.title')}
            </motion.h1>
            
            <motion.div
              className="w-24 h-1 bg-circle mx-auto md:mx-0 mb-4 md:mb-6"
              initial={{ opacity: 0, scaleX: 0 }}
              animate={{ opacity: 1, scaleX: 1 }}
              transition={{ duration: 0.7, delay: 0.3 }}
            ></motion.div>
            
            <motion.p 
              className="text-lg sm:text-xl md:text-2xl text-black mb-4 md:mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7, delay: 0.5 }}
            >
              {t('hero.main.description')}
            </motion.p>
            
            <motion.p 
              className="text-sm sm:text-base md:text-lg text-black"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7, delay: 0.7 }}
            >
              {t('hero.main.longdesc')}
            </motion.p>
          </motion.div>
          
          <motion.div
            className="flex justify-center md:justify-end mb-6 md:mb-0 order-1 md:order-2"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.7, delay: 0.3 }}
          >
            <img 
              src="/lovable-uploads/5bcc8e2c-cdd5-4c6b-89de-ce9f5f2d9536.png" 
              alt="People embracing in an authentic relating circle" 
              className="rounded-lg shadow-lg w-full max-w-sm md:max-w-md h-auto object-cover"
            />
          </motion.div>
        </div>
      </div>
    </section>
  );
};

export default Hero;
```

### 5. Services Grid Component

Create `src/components/ServicesGrid.tsx`:

```typescript
import React from 'react';
import { motion } from 'framer-motion';
import { ArrowUpRight } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

const ServicesGrid: React.FC = () => {
  const { t } = useLanguage();
  
  const services = [
    {
      id: 'authentic-love',
      title: t('service.authentic.love.title'),
      description: t('service.authentic.love.desc'),
      image: '/lovable-uploads/9a6f7ebc-d581-4d89-8381-0a69765dfcd3.png',
    },
    {
      id: 'authentic-english',
      title: t('service.authentic.english.title'),
      description: t('service.authentic.english.desc'),
      image: '/lovable-uploads/7492a0b8-1c89-4342-a837-c86b84d34400.png',
    },
    {
      id: 'authentic-german',
      title: t('service.authentic.german.title'),
      description: t('service.authentic.german.desc'),
      image: '/lovable-uploads/7492a0b8-1c89-4342-a837-c86b84d34400.png',
    },
    {
      id: 'goldies',
      title: t('service.goldies.title'),
      description: t('service.goldies.desc'),
      image: '/lovable-uploads/9a6f7ebc-d581-4d89-8381-0a69765dfcd3.png',
    },
    {
      id: 'private',
      title: t('service.private.title'),
      description: t('service.private.desc'),
      image: '/lovable-uploads/9a6f7ebc-d581-4d89-8381-0a69765dfcd3.png',
    },
    {
      id: 'workshops',
      title: t('service.workshops.title'),
      description: t('service.workshops.desc'),
      image: '/lovable-uploads/7492a0b8-1c89-4342-a837-c86b84d34400.png',
    },
  ];
  
  return (
    <section className="py-12 md:py-16 bg-white">
      <div className="container-custom">
        <motion.div 
          className="text-center mb-10 md:mb-14"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="text-2xl sm:text-3xl md:text-4xl font-semibold text-black mb-4">
            {t('services.title')}
          </h2>
          <p className="text-lg text-black max-w-3xl mx-auto">
            {t('services.subtitle')}
          </p>
        </motion.div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
          {services.map((service, index) => (
            <motion.div 
              key={service.id}
              className="service-card flex flex-col h-full"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <div className="mb-4 rounded-lg overflow-hidden">
                <img 
                  src={service.image} 
                  alt={service.title} 
                  className="w-full h-48 object-cover transition-transform duration-300 hover:scale-105"
                />
              </div>
              <h3 className="text-xl font-semibold mb-2 text-black">{service.title}</h3>
              <p className="text-black mb-4 flex-grow">{service.description}</p>
              <a 
                href={`/programs#${service.id}`} 
                className="inline-flex items-center text-circle hover:text-circle-dark font-medium transition-colors mt-auto"
              >
                {t('services.readmore')} <ArrowUpRight size={16} className="ml-1" />
              </a>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ServicesGrid;
```

### 6. Testimonials Component

Create `src/components/Testimonials.tsx`:

```typescript
import React from 'react';
import { motion } from 'framer-motion';
import { Quote } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

const Testimonials: React.FC = () => {
  const { t } = useLanguage();
  
  return (
    <section className="py-12 md:py-16 bg-circle-light/30">
      <div className="container-custom">
        <motion.h2 
          className="text-2xl sm:text-3xl md:text-4xl font-semibold text-black text-center mb-8 md:mb-12"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          {t('testimonials.title')}
        </motion.h2>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
          {/* This section will be filled with testimonials later */}
          <div className="bg-white p-4 md:p-6 rounded-lg shadow-md">
            <div className="flex justify-center mb-4">
              <div className="bg-circle/10 p-3 rounded-full">
                <Quote size={24} className="text-circle" />
              </div>
            </div>
            <p className="text-center text-black italic mb-4">
              {t('testimonials.placeholder')}
            </p>
            <p className="text-center font-semibold text-black">{t('testimonials.coming.soon')}</p>
          </div>
          
          <div className="bg-white p-4 md:p-6 rounded-lg shadow-md">
            <div className="flex justify-center mb-4">
              <div className="bg-circle/10 p-3 rounded-full">
                <Quote size={24} className="text-circle" />
              </div>
            </div>
            <p className="text-center text-black italic mb-4">
              {t('testimonials.placeholder')}
            </p>
            <p className="text-center font-semibold text-black">{t('testimonials.coming.soon')}</p>
          </div>
          
          <div className="bg-white p-4 md:p-6 rounded-lg shadow-md">
            <div className="flex justify-center mb-4">
              <div className="bg-circle/10 p-3 rounded-full">
                <Quote size={24} className="text-circle" />
              </div>
            </div>
            <p className="text-center text-black italic mb-4">
              {t('testimonials.placeholder')}
            </p>
            <p className="text-center font-semibold text-black">{t('testimonials.coming.soon')}</p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Testimonials;
```

### 7. Footer Component

Create `src/components/Footer.tsx`:

```typescript
import React from 'react';
import { Link } from 'react-router-dom';
import { Mail, Phone, MapPin, Instagram } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';

const Footer: React.FC = () => {
  const { t } = useLanguage();
  const currentYear = new Date().getFullYear();
  
  return (
    <footer className="bg-circle-light/60 py-10 md:py-16">
      <div className="container-custom">
        <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-8">
          {/* Logo and brief description */}
          <div className="col-span-1 md:col-span-1 lg:col-span-1">
            <Link to="/" className="inline-block mb-4">
              <img 
                src="/lovable-uploads/072921ca-89b7-4971-baaf-47c7144dee22.png" 
                alt="connecting-circle Logo" 
                className="h-16"
              />
            </Link>
            <p className="text-black text-sm mb-4">{t('footer.slogan')}</p>
            <p className="text-black text-sm">{t('footer.made.with.love')}</p>
          </div>
          
          {/* Navigation links */}
          <div className="col-span-1 md:col-span-1 lg:col-span-1">
            <h3 className="text-lg font-semibold mb-4 text-black">{t('footer.navigation')}</h3>
            <ul className="space-y-2">
              <li><Link to="/" className="text-black hover:text-circle transition-colors">{t('nav.home')}</Link></li>
              <li><Link to="/about" className="text-black hover:text-circle transition-colors">{t('nav.about')}</Link></li>
              <li><Link to="/coaching" className="text-black hover:text-circle transition-colors">{t('nav.coaching')}</Link></li>
              <li><Link to="/programs" className="text-black hover:text-circle transition-colors">{t('nav.programs')}</Link></li>
              <li><Link to="/book" className="text-black hover:text-circle transition-colors">{t('nav.book')}</Link></li>
            </ul>
          </div>
          
          {/* Contact information */}
          <div className="col-span-1 md:col-span-1 lg:col-span-1">
            <h3 className="text-lg font-semibold mb-4 text-black">{t('footer.contact')}</h3>
            <ul className="space-y-2">
              <li className="flex items-center">
                <Mail size={16} className="mr-2 text-circle" />
                <a href="mailto:info@connecting-circle.com" className="text-black hover:text-circle transition-colors">info@connecting-circle.com</a>
              </li>
              <li className="flex items-center">
                <Phone size={16} className="mr-2 text-circle" />
                <a href="tel:+49123456789" className="text-black hover:text-circle transition-colors">+49 123 456 789</a>
              </li>
              <li className="flex items-center">
                <MapPin size={16} className="mr-2 text-circle" />
                <span className="text-black">Berlin, Germany</span>
              </li>
              <li className="flex items-center">
                <Instagram size={16} className="mr-2 text-circle" />
                <a href="https://instagram.com/connecting-circle" target="_blank" rel="noopener noreferrer" className="text-black hover:text-circle transition-colors">@connecting-circle</a>
              </li>
            </ul>
          </div>
          
          {/* Newsletter subscription */}
          <div className="col-span-1 md:col-span-1 lg:col-span-1">
            <h3 className="text-lg font-semibold mb-4 text-black">Newsletter</h3>
            <p className="text-black text-sm mb-4">Sign up to receive updates and insights.</p>
            <form className="space-y-2">
              <input 
                type="email" 
                placeholder="Your email" 
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-circle"
              />
              <button 
                type="submit" 
                className="w-full bg-circle text-white px-4 py-2 rounded-md hover:bg-circle-dark transition-colors"
              >
                Subscribe
              </button>
            </form>
          </div>
        </div>
        
        <div className="mt-12 pt-8 border-t border-gray-300 text-center">
          <p className="text-black text-sm">
            &copy; {currentYear} connecting-circle. {t('footer.copyright')}
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
```

## Pages

### 1. Index Page

Create `src/pages/Index.tsx`:

```typescript
import React from 'react';
import Hero from '@/components/Hero';
import ServicesGrid from '@/components/ServicesGrid';
import Testimonials from '@/components/Testimonials';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { useLanguage } from '@/contexts/LanguageContext';

const Index = () => {
  const { language } = useLanguage();

  return (
    <div className="min-h-screen flex flex-col" key={`index-page-${language}`}>
      <Navbar />
      <main className="flex-grow">
        <Hero />
        <ServicesGrid />
        <Testimonials />
      </main>
      <Footer />
    </div>
  );
};

export default Index;
```

### 2. Other Pages

Create basic stub pages for About, Coaching, Programs, Book, and NotFound following a similar pattern to the Index page, with appropriate content.

## Setup the App.tsx and Main Routing

Create `src/App.tsx`:

```typescript
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { LanguageProvider } from "@/contexts/LanguageContext";
import Index from "./pages/Index";
import About from "./pages/About";
import Coaching from "./pages/Coaching";
import Programs from "./pages/Programs";
import Book from "./pages/Book";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <LanguageProvider>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Index />} />
            <Route path="/about" element={<About />} />
            <Route path="/coaching" element={<Coaching />} />
            <Route path="/programs" element={<Programs />} />
            <Route path="/book" element={<Book />} />
            {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </LanguageProvider>
  </QueryClientProvider>
);

export default App;
```

## Setup Main Entry Point

Create `src/main.tsx`:

```typescript
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
```

## Create the HTML Entry Point

Update `index.html`:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>connecting-circle - Authentic Relating & Communication</title>
    <meta name="description" content="Connecting Circle - Where words touch, people connect and growth happens. Professional services and group programs by Sophie Nicole Lemerle McGrath." />
    <meta name="author" content="Sophie Nicole Lemerle McGrath" />

    <meta property="og:title" content="connecting-circle - Authentic Relating & Communication" />
    <meta property="og:description" content="Where words touch, people connect and growth happens. Professional services and group programs by Sophie Nicole Lemerle McGrath." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

## Utils and Helpers

Create `src/lib/utils.ts`:

```typescript
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

## Required UI Components

These are shadcn UI components that should be implemented:

1. Button component
2. Dropdown Menu component 
3. Modal/Dialog component
4. Card component
5. Form components (inputs, selects, etc.)
6. Toast notifications

Implement each of these following the shadcn UI patterns.

## Running the Project

To run the project in development mode:

```bash
npm run dev
```

To build for production:

```bash
npm run build
```

## Adding Images

Ensure the following images are added to the public folder:
- Logo image for the header and footer
- Hero section background image
- Service card images
- Any other visual assets needed

## Final Checks

1. Test all routes to ensure they work correctly
2. Verify language switching functionality
3. Ensure responsive layout on different screen sizes
4. Check all links and interactions

## Deployment

Deploy the built application to your hosting platform of choice. Some options include:
- Vercel
- Netlify
- GitHub Pages
- AWS Amplify
